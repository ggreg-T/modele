
hyung tae kim

https://www.youtube.com/watch?v=F8iYtkBXoh4

------1:30  CRÉATION DES FICHIER MODELES CONTROLER ETC

creer les models controller etc des post et category
php artisan make:model "Post" -a 
le -a permet de créer tous les fichier en même temps

php artisan make:model "Category" -m 
pour n'avoir que le model et les migration

------3:00 REMPLISSAGE DES FICHIERS MIGRATION ET DÉCLARATION DES CLÉS ÉTRANGÈRES

dans les fichiers migrations de postt et de category:
creer les champs de la bdd et les clés étrangères
dans le fichier migration des posts :
  public function up()
    {
        Schema::create('posts', function (Blueprint $table) {
            $table->id();
            $table->string('title');
            $table->text('content');
            $table->string('image');
            $table->timestamps();
    (pour les clés étrangères)
            $table->foreignIdFor(User::class);
            $table->foreignIdFor(Category::class);

        });
    }

Et dans le fichier category : 
  public function up()
    {
        Schema::create('categories', function (Blueprint $table) {
            $table->id();
            $table->string('name');

            $table->timestamps();
        });
    }

------8 : 27 REMPLISSAGE DES FICHIERS MODELS ET CRÉATION DES RELATION ONE TO MANY

définir dans le dossier Model la relation one to many , un user a plusieurs post en créant la fonction: 

dans le fichier User.php et dans le Category.php: 
public function posts() { return $this->hasMany(Postt::class); } 

a contrario dans le fichier Post.php on doit définir qu'il appartient à un user et une categories
de cette manière 

 public function user()
    {
        return $this->belongsTo(User::class);
    }

    public function category()
    {
        return $this->belongsTo(Category::class);
    }

------5:55 CRÉATION DES FACTORY

créer la factory pour la category 
php artisan make:factory CategoryFactory --model category
 (pour dire qu'il appartient au model category)

*** vérifier que le < use App\Models\Category; > est bien intégré dans le factory category et 
                    < use App\Models\Post; > dans le postt factory



dans le fichier CategoryFactory : utiliser la librairie faker dans la 
public function definition()
{
return [
            'title' =>$this->faker->sentence(rand(5, 10), true),
            'content' =>$this->faker->sentences(5, true),
            'image' => 'https//via.placeholder.com/500'

        ];
} 

8:25 8:40
*** pour eviter des erreurs de mass assignement, on peut définir un champs protégé dans le fichier model/postt ceci
protected $guarded = []

--------  SEEDERS  ---------
dans le fichier seeder compléter la fonction run, car c'est elle qui ira chercher les champs  dans le fichier factory (une fois celle-ci complétée). 

!!!!!!! Ne pas oublier d'importer les class model !!!!!
use App\Models\Category;
use App\Models\User;

!!!Regarder a 10:30 pour plus de précision


13:45
!!!! une erreur apparait  : Class 'User' not found . c'est pck la classe user et category n'est pas importé dans le fichier de migration post, (procéder comme précedemment) puis une fois les classe importer faire un < migrate:refresh --seed > pour rafraichir et faire un seed.


-------- 15:25 INSTALLATION DE BREEZE
utiliser la commande :
composer require laravel/breeze --dev 
php artisan breeze:install
npm install 
npm run dev

-------- 17:45  CRÉATION DES ROUTES ET CONTROLEUR

CRÉER LA  route du post 

!!!!!! NE PAS OUBLIER D'IMPORTER LA CLASSE CONTROLLER !!!!!!!!
Route::ressource('posts', PostController::class);

ASTUCES : en faisant (php artisan route:list --name=posts) on récupère les url liées a la route posts qu'on a créée

Route::ressource('posts', PostController::class)->except('index');

puis faire de cette route , la page d'accueil en appellant la méthode index() du controleur et en la renommant posts.index

Route::get('/', [PostController::class, 'index'])->name('posts.index');

21:30
puis créer la view index dans le controleur et dans le dossier view.

---------22:40 MODIF DE BREEZE
Faire 2 menus différents, un quand on es connecté et l'autre non. dans le fichhier layouts/navigation.blade.php il faut modifier les setting dropdown , les balise <x-dropdown> => copier les balise <x-dropdown> afin d'en créer un pour l'auth avec les balises @auth;@endauth et pour l'invité avec @guest;@endguest.
pour le guest on peut juste retirer le form le script js dans le x-slot name='content' et créer le register et login comme ceci :
   <x-dropdown-link :href="route('login')"
                                   >
                                {{ __('SE connecter') }}
                            </x-dropdown-link>
                            <x-dropdown-link :href="route('register')"
                                   >
                                {{ __('S\'enregistrer ') }}
                            </x-dropdown-link>
24:15
!!!!!!!! une erreur apparaitra car il faut faire la meme chose pour le responsive setting option, baliser avec @auth

24:35 !!! il y aura une erreur par rapport au $header, il faudra le renseigner dans l'index qu'on a créé et balisé avec x-app-layout.

Pour la partie implémentation voir à 24:35.

------27:30 RÉCUPÉRATION DE TOUS LES POSTS 
 
Dans la fonction index du controleur entrer ceci:
    $posts = Post::all();  
(verifier la fonction compact())

------ 27:50  création des dossier partials: pour ajouter les component comme le footer.

------- 29:43 création et récupération de la date en entrant: 
{{ $post->created_at->format('d N Y')}}

------ 30:53 récupération des posts AVEC la categories: 
au début on a récupérer uniquement tous les post avec :  $posts = Post::all();
Maintenant on va les récupérer Avec les catégories correspondantes en rajoutant simplement :
        $posts = Post::with('category')->get();



------ 37:00 création du formulaire

----- 39:20 définition du storage:link pour rendre les images public











